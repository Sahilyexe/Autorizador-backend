# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  Autorizador-backkend

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  getByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/autorizacion.login
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Lambda que va a autorizar el ingreso.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /autorizacion
            Method: GET
            RestApiId: 
              Ref: ApiAutorizer

  ApiAutorizer:
    Type: AWS::Serverless::Api
    Properties:
      Description: A test API
      Name: Api-autorizer
      StageName: Prod
      Cors:
        AllowMethods: "'GET, OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
        AllowCredentials: false
      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        Authorizers:
          MyCognitoAuthorizer:
            AuthorizationScopes:
              - email
            UserPoolArn: !GetAtt Userpool.Arn
        AddDefaultAuthorizerToCorsPreflight: false

  GatewayResponses:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'Content-Type'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        gatewayresponse.header.Access-Control-Allow-Method: "'OPTIONS,GET'"
        gatewayresponse.header.Content-Type: "'application/json'"
      ResponseType: UNAUTHORIZED
      RestApiId: !Ref ApiAutorizer
      StatusCode: '401'            

  PetsModelNoFlatten:
    Type: 'AWS::ApiGateway::Model'
    Properties:
      RestApiId: !Ref ApiAutorizer
      ContentType: application/json
      Description: Schema for Pets example
      Name: PetsModelNoFlatten
      Schema:
        $schema: 'http://json-schema.org/draft-04/schema#'
        title: PetsModelNoFlatten
        type: object

  Userpool:
    Type: AWS::Cognito::UserPool
    Properties: 
      DeletionProtection: ACTIVE
      UsernameAttributes: 
        - email
      UserPoolName: authentication-user-pool
      AutoVerifiedAttributes:
        - email
      UserAttributeUpdateSettings: 
        AttributesRequireVerificationBeforeUpdate: 
          - email


  DomainForCognito: 
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: testpanama2
      UserPoolId: !Ref Userpool

  Cliente: 
    Type: AWS::Cognito::UserPoolClient
    Properties: 
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes: 
        - email
        - openid
        - phone
      CallbackURLs: 
        - http://localhost:4200/callback
      ClientName: cliente2
      UserPoolId: !Ref Userpool
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlows:
        - implicit
      
 
Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ApiAutorizer}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
